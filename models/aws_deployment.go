// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsDeployment aws deployment
//
// swagger:model aws_deployment
type AwsDeployment struct {

	// coordinates
	Coordinates *Coordinates `json:"coordinates,omitempty"`

	// instance key
	// Min Length: 1
	InstanceKey string `json:"instance_key,omitempty"`

	// instance type
	// Min Length: 1
	InstanceType string `json:"instance_type,omitempty"`

	// private subnet
	// Min Length: 1
	PrivateSubnet string `json:"private_subnet,omitempty"`

	// public subnet
	// Min Length: 1
	PublicSubnet string `json:"public_subnet,omitempty"`

	// region
	// Min Length: 1
	Region string `json:"region,omitempty"`

	// vpc id
	// Min Length: 1
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this aws deployment
func (m *AwsDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsDeployment) validateCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	if m.Coordinates != nil {
		if err := m.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *AwsDeployment) validateInstanceKey(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceKey) { // not required
		return nil
	}

	if err := validate.MinLength("instance_key", "body", m.InstanceKey, 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsDeployment) validateInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if err := validate.MinLength("instance_type", "body", m.InstanceType, 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsDeployment) validatePrivateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateSubnet) { // not required
		return nil
	}

	if err := validate.MinLength("private_subnet", "body", m.PrivateSubnet, 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsDeployment) validatePublicSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicSubnet) { // not required
		return nil
	}

	if err := validate.MinLength("public_subnet", "body", m.PublicSubnet, 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsDeployment) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if err := validate.MinLength("region", "body", m.Region, 1); err != nil {
		return err
	}

	return nil
}

func (m *AwsDeployment) validateVpcID(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcID) { // not required
		return nil
	}

	if err := validate.MinLength("vpc_id", "body", m.VpcID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this aws deployment based on the context it is used
func (m *AwsDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsDeployment) contextValidateCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.Coordinates != nil {
		if err := m.Coordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsDeployment) UnmarshalBinary(b []byte) error {
	var res AwsDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

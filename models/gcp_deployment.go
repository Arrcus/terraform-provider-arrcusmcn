// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpDeployment gcp deployment
//
// swagger:model gcp_deployment
type GcpDeployment struct {

	// arc orch ip
	// Min Length: 1
	ArcOrchIP string `json:"arc_orch_ip,omitempty"`

	// byoip
	// Min Length: 1
	Byoip string `json:"byoip,omitempty"`

	// credentials id
	// Min Length: 1
	CredentialsID string `json:"credentials_id,omitempty"`

	// instance key
	InstanceKey *InstanceKey `json:"instance_key,omitempty"`

	// instance type
	// Min Length: 1
	InstanceType string `json:"instance_type,omitempty"`

	// private network
	// Min Length: 1
	PrivateNetwork string `json:"private_network,omitempty"`

	// private subnet
	// Min Length: 1
	PrivateSubnet string `json:"private_subnet,omitempty"`

	// public network
	// Min Length: 1
	PublicNetwork string `json:"public_network,omitempty"`

	// public subnet
	// Min Length: 1
	PublicSubnet string `json:"public_subnet,omitempty"`

	// region
	// Min Length: 1
	Region string `json:"region,omitempty"`

	// zone
	// Min Length: 1
	Zone string `json:"zone,omitempty"`
}

// Validate validates this gcp deployment
func (m *GcpDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArcOrchIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByoip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpDeployment) validateArcOrchIP(formats strfmt.Registry) error {
	if swag.IsZero(m.ArcOrchIP) { // not required
		return nil
	}

	if err := validate.MinLength("arc_orch_ip", "body", m.ArcOrchIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validateByoip(formats strfmt.Registry) error {
	if swag.IsZero(m.Byoip) { // not required
		return nil
	}

	if err := validate.MinLength("byoip", "body", m.Byoip, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validateCredentialsID(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialsID) { // not required
		return nil
	}

	if err := validate.MinLength("credentials_id", "body", m.CredentialsID, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validateInstanceKey(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceKey) { // not required
		return nil
	}

	if m.InstanceKey != nil {
		if err := m.InstanceKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance_key")
			}
			return err
		}
	}

	return nil
}

func (m *GcpDeployment) validateInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if err := validate.MinLength("instance_type", "body", m.InstanceType, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validatePrivateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateNetwork) { // not required
		return nil
	}

	if err := validate.MinLength("private_network", "body", m.PrivateNetwork, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validatePrivateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateSubnet) { // not required
		return nil
	}

	if err := validate.MinLength("private_subnet", "body", m.PrivateSubnet, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validatePublicNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicNetwork) { // not required
		return nil
	}

	if err := validate.MinLength("public_network", "body", m.PublicNetwork, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validatePublicSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicSubnet) { // not required
		return nil
	}

	if err := validate.MinLength("public_subnet", "body", m.PublicSubnet, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if err := validate.MinLength("region", "body", m.Region, 1); err != nil {
		return err
	}

	return nil
}

func (m *GcpDeployment) validateZone(formats strfmt.Registry) error {
	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if err := validate.MinLength("zone", "body", m.Zone, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gcp deployment based on the context it is used
func (m *GcpDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpDeployment) contextValidateInstanceKey(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceKey != nil {
		if err := m.InstanceKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpDeployment) UnmarshalBinary(b []byte) error {
	var res GcpDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

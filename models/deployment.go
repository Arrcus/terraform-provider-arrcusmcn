// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment deployment
//
// swagger:model deployment
type Deployment struct {

	// action
	Action string `json:"action,omitempty"`

	// active IP
	ActiveIP string `json:"activeIP,omitempty"`

	// active IP gateway
	ActiveIPGateway string `json:"activeIPGateway,omitempty"`

	// active private IP
	ActivePrivateIP string `json:"activePrivateIP,omitempty"`

	// arc orch ip
	// Min Length: 1
	ArcOrchIP string `json:"arc_orch_ip,omitempty"`

	// aws deployment
	AwsDeployment *AwsDeployment `json:"aws_deployment,omitempty"`

	// azure deployment
	AzureDeployment *AzureDeployment `json:"azure_deployment,omitempty"`

	// backup IP
	BackupIP string `json:"backupIP,omitempty"`

	// backup private IP
	BackupPrivateIP string `json:"backupPrivateIP,omitempty"`

	// coordinates
	Coordinates *Coordinates `json:"coordinates,omitempty"`

	// credentials
	// Required: true
	Credentials struct {
		AwsCredentials

		AzureCredentials

		GcpCredentials

		OnpremCredentials
	} `json:"credentials"`

	// credentials id
	// Min Length: 1
	CredentialsID string `json:"credentials_id,omitempty"`

	// enable high availability
	EnableHighAvailability bool `json:"enable_high_availability,omitempty"`

	// enable private subnet
	EnablePrivateSubnet bool `json:"enable_private_subnet,omitempty"`

	// gcp deployment
	GcpDeployment *GcpDeployment `json:"gcp_deployment,omitempty"`

	// hub number
	HubNumber int64 `json:"hubNumber,omitempty"`

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// ingress sg
	IngressSg string `json:"ingressSg,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// onprem deployment
	OnpremDeployment *OnpremDeployment `json:"onprem_deployment,omitempty"`

	// private cidr
	PrivateCidr string `json:"privateCidr,omitempty"`

	// provider
	Provider Providers `json:"provider,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status ID
	StatusID int64 `json:"statusID,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArcOrchIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnpremDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) validateArcOrchIP(formats strfmt.Registry) error {
	if swag.IsZero(m.ArcOrchIP) { // not required
		return nil
	}

	if err := validate.MinLength("arc_orch_ip", "body", m.ArcOrchIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateAwsDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsDeployment) { // not required
		return nil
	}

	if m.AwsDeployment != nil {
		if err := m.AwsDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateAzureDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureDeployment) { // not required
		return nil
	}

	if m.AzureDeployment != nil {
		if err := m.AzureDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	if m.Coordinates != nil {
		if err := m.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateCredentials(formats strfmt.Registry) error {

	return nil
}

func (m *Deployment) validateCredentialsID(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialsID) { // not required
		return nil
	}

	if err := validate.MinLength("credentials_id", "body", m.CredentialsID, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateGcpDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpDeployment) { // not required
		return nil
	}

	if m.GcpDeployment != nil {
		if err := m.GcpDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateOnpremDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.OnpremDeployment) { // not required
		return nil
	}

	if m.OnpremDeployment != nil {
		if err := m.OnpremDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onprem_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onprem_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if err := m.Provider.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

// ContextValidate validate this deployment based on the context it is used
func (m *Deployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnpremDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) contextValidateAwsDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsDeployment != nil {
		if err := m.AwsDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateAzureDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureDeployment != nil {
		if err := m.AzureDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.Coordinates != nil {
		if err := m.Coordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Deployment) contextValidateGcpDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpDeployment != nil {
		if err := m.GcpDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateOnpremDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.OnpremDeployment != nil {
		if err := m.OnpremDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onprem_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onprem_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Provider.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
